'use client';

import { useState, useEffect } from 'react';
import { 
  LuMail, 
  LuSend, 
  LuUsers, 
  LuFileText, 
  LuEye, 
  LuTrash2,
  LuLoader,
  LuCircleAlert,
  LuCheck,
  LuX,
  LuCode,
  LuMonitor,
  LuSmartphone,
  LuBold,
  LuItalic,
  LuUnderline,
  LuHeading1,
  LuHeading2,
  LuList,
  LuLink,
  LuSettings,
  LuLogOut,
  LuPlus,
  LuMinus,
  LuCircleCheck,
  LuType,
  LuImage,
  LuAlignLeft
} from 'react-icons/lu';
import { apiService } from '../services/apiService';

interface EmailDashboardProps {
  onDisconnect: () => void;
}

interface Contact {
  _id: string;
  name?: string;
  email: string;
  phone?: string;
}

export default function EmailDashboard({ onDisconnect }: EmailDashboardProps) {
  const [emailConfig, setEmailConfig] = useState<any>(null);
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);
  const [manualEmails, setManualEmails] = useState('');
  
  // Email form state
  const [subject, setSubject] = useState('');
  const [fromName, setFromName] = useState('');
  const [content, setContent] = useState('');
  const [contentType, setContentType] = useState<'plain' | 'html'>('html');
  
  // UI state
  const [showPreview, setShowPreview] = useState(false);
  const [previewDevice, setPreviewDevice] = useState<'desktop' | 'mobile'>('desktop');
  const [isSending, setIsSending] = useState(false);
  const [sendResult, setSendResult] = useState<any>(null);
  const [isLoadingContacts, setIsLoadingContacts] = useState(true);

  useEffect(() => {
    fetchEmailConfig();
    fetchContacts();
  }, []);

  const fetchEmailConfig = async () => {
    try {
      const response = await apiService.get('/api/email/config');
      setEmailConfig(response);
    } catch (error) {
      console.error('Failed to fetch email config:', error);
    }
  };

  const fetchContacts = async () => {
    try {
      const response = await apiService.get('/api/contacts');
      setContacts(response.contacts || []);
    } catch (error) {
      console.error('Failed to fetch contacts:', error);
    } finally {
      setIsLoadingContacts(false);
    }
  };

  const handleDisconnect = async () => {
    if (confirm('Are you sure you want to disconnect your email account?')) {
      try {
        await apiService.delete('/api/email/config');
        onDisconnect();
      } catch (error) {
        console.error('Failed to disconnect:', error);
      }
    }
  };

  const handleSelectAll = () => {
    if (selectedContacts.length === contacts.length) {
      setSelectedContacts([]);
    } else {
      setSelectedContacts(contacts.map(c => c._id));
    }
  };

  const handleContactToggle = (contactId: string) => {
    setSelectedContacts(prev => 
      prev.includes(contactId)
        ? prev.filter(id => id !== contactId)
        : [...prev, contactId]
    );
  };

  const getTotalRecipients = () => {
    const manualCount = manualEmails.split(',').filter(e => e.trim()).length;
    return selectedContacts.length + manualCount;
  };

  const handleSend = async () => {
    if (!subject.trim()) {
      alert('Please enter an email subject');
      return;
    }

    if (!content.trim()) {
      alert('Please enter email content');
      return;
    }

    const totalRecipients = getTotalRecipients();
    if (totalRecipients === 0) {
      alert('Please select at least one recipient');
      return;
    }

    if (!confirm(`Send email to ${totalRecipients} recipient(s)?`)) {
      return;
    }

    setIsSending(true);
    setSendResult(null);

    try {
      // Combine contact IDs and manual emails
      const recipients = [
        ...selectedContacts,
        ...manualEmails.split(',').map(e => e.trim()).filter(e => e)
      ];

      const response = await apiService.post('/api/email/send-bulk', {
        subject,
        recipients,
        content,
        content_type: contentType,
        from_name: fromName || undefined
      });

      setSendResult(response);
      
      if (response.success) {
        // Reset form on success
        setSubject('');
        setContent('');
        setFromName('');
        setSelectedContacts([]);
        setManualEmails('');
      }
    } catch (error: any) {
      setSendResult({
        success: false,
        message: error.response?.data?.detail || 'Failed to send emails',
        total_sent: 0,
        total_failed: getTotalRecipients(),
        failed_emails: []
      });
    } finally {
      setIsSending(false);
    }
  };

  // Helper function to insert HTML tags
  const insertHtml = (openTag: string, closeTag: string) => {
    const textarea = document.querySelector('textarea[placeholder*="HTML"]') as HTMLTextAreaElement;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = content.substring(start, end);
    const newText = content.substring(0, start) + openTag + selectedText + closeTag + content.substring(end);
    
    setContent(newText);
    
    // Restore cursor position
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + openTag.length, start + openTag.length + selectedText.length);
    }, 0);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6 md:p-10">
      <div className="max-w-7xl mx-auto">
        {/* Modern Header */}
        <div className="bg-gradient-to-r from-gray-900 to-gray-700 rounded-3xl p-10 mb-10 shadow-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-6">
              <div className="w-20 h-20 bg-white rounded-2xl flex items-center justify-center shadow-xl transform hover:scale-105 transition-transform duration-300">
                <LuMail size={36} className="text-gray-900" />
              </div>
              <div>
                <h1 className="text-4xl font-extrabold text-white tracking-tight">
                  Email Campaign Studio
                </h1>
                <div className="flex items-center gap-2 mt-3">
                  <div className="w-2.5 h-2.5 bg-green-400 rounded-full animate-pulse shadow-lg shadow-green-400/50"></div>
                  <p className="text-sm text-gray-200">
                    Connected as <span className="font-semibold text-white">{emailConfig?.email}</span>
                  </p>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-5">
              <button
                onClick={() => {/* Settings placeholder */}}
                className="p-5 bg-white/10 hover:bg-white/20 rounded-2xl transition-all duration-200 group backdrop-blur-sm"
              >
                <LuSettings size={22} className="text-white group-hover:rotate-90 transition-transform duration-300" />
              </button>
              <button
                onClick={handleDisconnect}
                className="flex items-center gap-2 px-6 py-3.5 bg-white text-gray-900 hover:bg-gray-100 rounded-2xl transition-all duration-200 font-bold shadow-xl"
              >
                <LuLogOut size={20} />
                Disconnect
              </button>
            </div>
          </div>
        </div>

        {/* Recipients Section - Now at Top */}
        <div className="space-y-6 mb-8">
          <div className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
            <div className="bg-white p-6 border-b-2 border-gray-200">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-4">
                  <div className="w-10 h-10 bg-gray-900 rounded-xl flex items-center justify-center">
                    <LuUsers size={20} className="text-white" />
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-900 text-lg">
                      Recipients
                    </h3>
                    <p className="text-xs text-gray-500">
                      {selectedContacts.length} selected
                    </p>
                  </div>
                </div>
                <button
                  onClick={handleSelectAll}
                  className="px-6 py-2 bg-gray-900 text-white rounded-xl hover:bg-gray-800 transition-all duration-200 text-sm font-semibold flex items-center justify-center gap-2"
                >
                  {selectedContacts.length === contacts.length ? (
                    <>
                      <LuMinus size={16} />
                      Deselect All
                    </>
                  ) : (
                    <>
                      <LuPlus size={16} />
                      Select All
                    </>
                  )}
                </button>
              </div>
            </div>

            <div className="grid lg:grid-cols-3 gap-6 p-6 bg-gray-50">
              {/* Contacts Selection Column */}
              <div className="lg:col-span-2">
                <label className="block text-sm font-bold text-gray-900 mb-3 flex items-center gap-2">
                  <LuUsers size={16} />
                  Select from Contacts
                </label>

              <div className="p-6 max-h-96 overflow-y-auto bg-gray-50">
                {isLoadingContacts ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <LuLoader size={32} className="animate-spin text-black mb-3" />
                    <p className="text-sm text-gray-600 font-medium">Loading contacts...</p>
                  </div>
                ) : contacts.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                      <LuUsers size={32} className="text-gray-400" />
                    </div>
                    <p className="text-sm font-medium text-gray-600">No contacts found</p>
                    <p className="text-xs text-gray-400 mt-1">Add contacts to get started</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {contacts.map((contact) => (
                      <label
                        key={contact._id}
                        className="flex items-center gap-4 p-5 rounded-2xl bg-white border-2 border-gray-200 hover:border-black cursor-pointer transition-all duration-200 group"
                      >
                        <div className="relative">
                          <input
                            type="checkbox"
                            checked={selectedContacts.includes(contact._id)}
                            onChange={() => handleContactToggle(contact._id)}
                            className="w-5 h-5 text-black border-2 border-gray-300 rounded focus:ring-2 focus:ring-black cursor-pointer"
                          />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="font-semibold text-black truncate group-hover:text-gray-900">
                            {contact.name || 'Unknown'}
                          </p>
                          <p className="text-xs text-gray-500 truncate">
                            {contact.email}
                          </p>
                        </div>
                        <LuCircleCheck 
                          size={20} 
                          className={`transition-all duration-200 ${
                            selectedContacts.includes(contact._id) 
                              ? 'text-black opacity-100' 
                              : 'text-gray-300 opacity-0 group-hover:opacity-50'
                          }`} 
                        />
                      </label>
                    ))}
                  </div>
                )}
              </div>

              {/* Manual Email Input */}
              <div className="p-6 border-t-2 border-gray-200 bg-white">
                <label className="block text-sm font-bold text-black mb-3 flex items-center gap-2">
                  <LuMail size={16} />
                  Manual Email Entry
                </label>
                <textarea
                  value={manualEmails}
                  onChange={(e) => setManualEmails(e.target.value)}
                  placeholder="email1@example.com, email2@example.com, email3@example.com"
                  rows={3}
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl bg-gray-50 text-black text-sm focus:ring-2 focus:ring-black focus:border-black resize-none font-mono"
                />
                <p className="text-xs text-gray-500 mt-2 flex items-center gap-1">
                  <LuCircleAlert size={12} />
                  Separate emails with commas
                </p>
              </div>
            </div>

            {/* Total Recipients Summary */}
            <div className="bg-black rounded-2xl p-6 text-white shadow-2xl border border-gray-200 relative overflow-hidden">
              <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-5 rounded-full -mr-16 -mt-16"></div>
              <div className="relative z-10">
                <div className="flex items-start justify-between">
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <LuUsers size={18} className="text-gray-400" />
                      <p className="text-sm font-medium text-gray-400 uppercase tracking-wider">Total Recipients</p>
                    </div>
                    <p className="text-5xl font-black text-white">{getTotalRecipients()}</p>
                    <p className="text-xs text-gray-400 mt-2">Ready to send</p>
                  </div>
                  <div className="w-16 h-16 bg-white bg-opacity-10 rounded-2xl flex items-center justify-center">
                    <LuCircleCheck size={32} className="text-white" />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Compose Email */}
          <div className="lg:col-span-2 space-y-6">
            {/* Email Form */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
              <div className="bg-black p-6 border-b-2 border-gray-900">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center">
                      <LuFileText size={20} className="text-black" />
                    </div>
                    <h3 className="font-bold text-white text-lg">
                      Compose Email
                    </h3>
                  </div>
                  <div className="flex items-center gap-4">
                    {/* Content Type Toggle */}
                    <div className="flex bg-gray-800 rounded-xl p-1 border border-gray-700">
                      <button
                        onClick={() => setContentType('html')}
                        className={`px-4 py-2 text-sm rounded-md transition-all duration-200 font-semibold ${
                          contentType === 'html'
                            ? 'bg-white text-black shadow-md'
                            : 'text-gray-400 hover:text-white'
                        }`}
                      >
                        <div className="flex items-center gap-2">
                          <LuCode size={16} />
                          HTML
                        </div>
                      </button>
                      <button
                        onClick={() => setContentType('plain')}
                        className={`px-4 py-2 text-sm rounded-md transition-all duration-200 font-semibold ${
                          contentType === 'plain'
                            ? 'bg-white text-black shadow-md'
                            : 'text-gray-400 hover:text-white'
                        }`}
                      >
                        <div className="flex items-center gap-2">
                          <LuAlignLeft size={16} />
                          Plain
                        </div>
                      </button>
                    </div>

                    {/* Preview Toggle */}
                    <button
                      onClick={() => setShowPreview(!showPreview)}
                      className={`px-4 py-2 text-sm rounded-xl transition-all duration-200 flex items-center gap-2 font-semibold ${
                        showPreview
                          ? 'bg-white text-black'
                          : 'bg-gray-800 text-white hover:bg-gray-700 border border-gray-700'
                      }`}
                    >
                      <LuEye size={16} />
                      Preview
                    </button>
                  </div>
                </div>
              </div>

              <div className="p-6 space-y-5 bg-gray-50">
                {/* From Name */}
                <div>
                  <label className="block text-sm font-bold text-black mb-2 flex items-center gap-2">
                    <LuType size={16} />
                    From Name <span className="text-gray-400 font-normal">(Optional)</span>
                  </label>
                  <input
                    type="text"
                    value={fromName}
                    onChange={(e) => setFromName(e.target.value)}
                    placeholder="e.g., StitchByte Team"
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black font-medium"
                  />
                </div>

                {/* Subject */}
                <div>
                  <label className="block text-sm font-bold text-black mb-2 flex items-center gap-2">
                    <LuMail size={16} />
                    Email Subject
                  </label>
                  <input
                    type="text"
                    value={subject}
                    onChange={(e) => setSubject(e.target.value)}
                    placeholder="Enter your email subject..."
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black font-medium"
                  />
                </div>

                {/* Content Editor */}
                <div>
                  <label className="block text-sm font-bold text-black mb-2 flex items-center gap-2">
                    <LuFileText size={16} />
                    Email Content
                  </label>
                  
                  {contentType === 'html' ? (
                    <div className="border-2 border-gray-300 rounded-2xl overflow-hidden bg-white">
                      {/* Simple HTML Toolbar */}
                      <div className="bg-gray-100 border-b-2 border-gray-300 p-4 flex flex-wrap gap-1">
                        <button
                          type="button"
                          onClick={() => insertHtml('<h1>', '</h1>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Heading 1"
                        >
                          <LuHeading1 size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<h2>', '</h2>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Heading 2"
                        >
                          <LuHeading2 size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<strong>', '</strong>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Bold"
                        >
                          <LuBold size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<em>', '</em>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Italic"
                        >
                          <LuItalic size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<u>', '</u>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Underline"
                        >
                          <LuUnderline size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<ul><li>', '</li></ul>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Bullet List"
                        >
                          <LuList size={18} />
                        </button>
                        <button
                          type="button"
                          onClick={() => insertHtml('<a href="">', '</a>')}
                          className="p-2 hover:bg-white rounded-xl transition-all duration-200 border border-transparent hover:border-gray-300"
                          title="Link"
                        >
                          <LuLink size={18} />
                        </button>
                      </div>
                      <textarea
                        value={content}
                        onChange={(e) => setContent(e.target.value)}
                        placeholder="<h1>Hello!</h1><p>Write your HTML email content here...</p>"
                        rows={12}
                        className="w-full px-4 py-3 border-0 bg-white text-black focus:ring-0 resize-none font-mono text-sm"
                      />
                    </div>
                  ) : (
                    <textarea
                      value={content}
                      onChange={(e) => setContent(e.target.value)}
                      placeholder="Write your email content here..."
                      rows={12}
                      className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black resize-none text-sm"
                    />
                  )}
                </div>

                {/* Send Button */}
                <div className="pt-4">
                  <button
                    onClick={handleSend}
                    disabled={isSending || getTotalRecipients() === 0}
                    className="w-full flex items-center justify-center gap-4 px-8 py-4 bg-black text-white rounded-2xl font-bold text-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-2xl hover:shadow-black/20 hover:scale-[1.02] active:scale-[0.98]"
                  >
                    {isSending ? (
                      <>
                        <LuLoader size={24} className="animate-spin" />
                        Sending Emails...
                      </>
                    ) : (
                      <>
                        <LuSend size={24} />
                        Send to {getTotalRecipients()} Recipient{getTotalRecipients() !== 1 ? 's' : ''}
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Send Result */}
            {sendResult && (
              <div className={`rounded-2xl p-6 border-2 shadow-lg ${
                sendResult.success
                  ? 'bg-white border-black'
                  : 'bg-white border-black'
              }`}>
                <div className="flex items-start gap-5">
                  {sendResult.success ? (
                    <div className="w-12 h-12 bg-black rounded-2xl flex items-center justify-center flex-shrink-0">
                      <LuCheck size={24} className="text-white" />
                    </div>
                  ) : (
                    <div className="w-12 h-12 bg-black rounded-2xl flex items-center justify-center flex-shrink-0">
                      <LuCircleAlert size={24} className="text-white" />
                    </div>
                  )}
                  <div className="flex-1">
                    <h4 className="font-bold text-black text-lg mb-2">
                      {sendResult.message}
                    </h4>
                    <div className="text-sm space-y-2 text-gray-700">
                      <p className="flex items-center gap-2">
                        <LuCircleCheck size={16} />
                        Successfully sent: <span className="font-bold text-black">{sendResult.total_sent}</span>
                      </p>
                      {sendResult.total_failed > 0 && (
                        <p className="flex items-center gap-2">
                          <LuCircleAlert size={16} />
                          Failed: <span className="font-bold text-black">{sendResult.total_failed}</span>
                        </p>
                      )}
                      {sendResult.failed_emails && sendResult.failed_emails.length > 0 && (
                        <details className="mt-3">
                          <summary className="cursor-pointer font-semibold hover:text-black flex items-center gap-2">
                            <LuCircleAlert size={14} />
                            View failed emails
                          </summary>
                          <ul className="mt-2 space-y-1 ml-6 text-xs font-mono">
                            {sendResult.failed_emails.map((email: string, idx: number) => (
                              <li key={idx} className="text-gray-600">• {email}</li>
                            ))}
                          </ul>
                        </details>
                      )}
                    </div>
                  </div>
                  <button
                    onClick={() => setSendResult(null)}
                    className="w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-black hover:text-white rounded-xl transition-all duration-200"
                  >
                    <LuX size={18} />
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Preview Modal */}
        {showPreview && (
          <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-5 backdrop-blur-sm">
            <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden border border-gray-200">
              {/* Preview Header */}
              <div className="p-6 border-b-2 border-gray-200 flex items-center justify-between bg-gray-50">
                <div className="flex items-center gap-4">
                  <div className="w-10 h-10 bg-black rounded-xl flex items-center justify-center">
                    <LuEye size={20} className="text-white" />
                  </div>
                  <h3 className="font-bold text-black text-lg">
                    Email Preview
                  </h3>
                </div>
                <div className="flex items-center gap-4">
                  {/* Device Toggle */}
                  <div className="flex bg-gray-200 rounded-xl p-1">
                    <button
                      onClick={() => setPreviewDevice('desktop')}
                      className={`px-4 py-2 text-sm rounded-xl transition-all duration-200 font-semibold ${
                        previewDevice === 'desktop'
                          ? 'bg-black text-white shadow-md'
                          : 'text-gray-600 hover:text-black'
                      }`}
                    >
                      <LuMonitor size={18} />
                    </button>
                    <button
                      onClick={() => setPreviewDevice('mobile')}
                      className={`px-4 py-2 text-sm rounded-xl transition-all duration-200 font-semibold ${
                        previewDevice === 'mobile'
                          ? 'bg-black text-white shadow-md'
                          : 'text-gray-600 hover:text-black'
                      }`}
                    >
                      <LuSmartphone size={18} />
                    </button>
                  </div>
                  <button
                    onClick={() => setShowPreview(false)}
                    className="w-10 h-10 flex items-center justify-center bg-gray-100 hover:bg-black hover:text-white rounded-xl transition-all duration-200"
                  >
                    <LuX size={20} />
                  </button>
                </div>
              </div>

              {/* Preview Content */}
              <div className="p-8 overflow-y-auto max-h-[calc(90vh-100px)] bg-gray-100">
                <div
                  className={`mx-auto bg-white rounded-2xl shadow-2xl overflow-hidden transition-all border border-gray-200 ${
                    previewDevice === 'mobile' ? 'max-w-sm' : 'max-w-3xl'
                  }`}
                >
                  {/* Email Header */}
                  <div className="p-6 border-b-2 border-gray-200 bg-gray-50">
                    <div className="text-sm text-gray-700 mb-2 flex items-center gap-2">
                      <LuMail size={14} />
                      <strong className="text-black">From:</strong> {fromName || 'Your Company'} &lt;{emailConfig?.email}&gt;
                    </div>
                    <div className="text-sm text-gray-700 mb-4 flex items-center gap-2">
                      <LuUsers size={14} />
                      <strong className="text-black">To:</strong> {getTotalRecipients()} recipient{getTotalRecipients() !== 1 ? 's' : ''}
                    </div>
                    <h2 className="text-2xl font-black text-black">
                      {subject || '(No Subject)'}
                    </h2>
                  </div>

                  {/* Email Body */}
                  <div className="p-8 bg-white">
                    {contentType === 'html' ? (
                      <div
                        className="prose max-w-none text-black"
                        dangerouslySetInnerHTML={{ __html: content || '<p class="text-gray-400 italic">No content yet...</p>' }}
                      />
                    ) : (
                      <pre className="whitespace-pre-wrap font-sans text-black">
                        {content || 'No content yet...'}
                      </pre>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
